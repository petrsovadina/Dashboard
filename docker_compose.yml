version: '3.8'

services:
  # Main Dashboard Application
  azure-ai-dashboard:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: azure-ai-dashboard
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Azure Configuration
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_RESOURCE_GROUP_NAME=${AZURE_RESOURCE_GROUP_NAME}
      - AZURE_REGION=${AZURE_REGION:-westeurope}
      
      # Application Configuration
      - NODE_ENV=production
      - PORT=3001
      - AUTO_REFRESH_SECONDS=${AUTO_REFRESH_SECONDS:-30}
      - ENABLE_WEBSOCKET=${ENABLE_WEBSOCKET:-true}
      
      # Security
      - API_KEY=${API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
    volumes:
      - dashboard-logs:/app/logs
      - dashboard-cache:/app/cache
    
    networks:
      - dashboard-network
    
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      - redis
      - prometheus

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: dashboard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dashboard123}
    volumes:
      - redis-data:/data
    networks:
      - dashboard-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dashboard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dashboard-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dashboard-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-dashboard123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dashboard-network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dashboard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx-logs:/var/log/nginx
    networks:
      - dashboard-network
    depends_on:
      - azure-ai-dashboard
      - grafana

volumes:
  dashboard-logs:
    driver: local
  dashboard-cache:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

networks:
  dashboard-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
